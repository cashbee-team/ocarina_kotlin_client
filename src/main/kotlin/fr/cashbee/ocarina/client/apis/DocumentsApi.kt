/**
* Ocarina API
* OptiCAl Recognition of IdeNtity pApers
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package fr.cashbee.ocarina.client.apis

import fr.cashbee.ocarina.client.models.DirectUploadResponse
import fr.cashbee.ocarina.client.models.DocumentIdentificationInfo
import fr.cashbee.ocarina.client.models.DocumentIdentificationResponse
import fr.cashbee.ocarina.client.models.DocumentsIdentificationRequest

import fr.cashbee.ocarina.client.infrastructure.ApiClient
import fr.cashbee.ocarina.client.infrastructure.ClientException
import fr.cashbee.ocarina.client.infrastructure.ClientError
import fr.cashbee.ocarina.client.infrastructure.ServerException
import fr.cashbee.ocarina.client.infrastructure.ServerError
import fr.cashbee.ocarina.client.infrastructure.MultiValueMap
import fr.cashbee.ocarina.client.infrastructure.RequestConfig
import fr.cashbee.ocarina.client.infrastructure.RequestMethod
import fr.cashbee.ocarina.client.infrastructure.ResponseType
import fr.cashbee.ocarina.client.infrastructure.Success
import fr.cashbee.ocarina.client.infrastructure.toMultiValue

class DocumentsApi(basePath: kotlin.String = "https://api-hyrule.cashbee.io") : ApiClient(basePath) {

    /**
    * 
    * Ask for a document identification
    * @param documentsIdentificationRequest Document metadata (optional)
    * @return DocumentIdentificationResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun documentIdentification(documentsIdentificationRequest: DocumentsIdentificationRequest?) : DocumentIdentificationResponse {
        val localVariableBody: kotlin.Any? = documentsIdentificationRequest
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/documents",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<DocumentIdentificationResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentIdentificationResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * 
    * Get document identification information
    * @param uuid  
    * @return DocumentIdentificationInfo
    */
    @Suppress("UNCHECKED_CAST")
    fun documentIdentificationInfo(uuid: java.util.UUID) : DocumentIdentificationInfo {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/documents/{uuid}".replace("{"+"uuid"+"}", "$uuid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<DocumentIdentificationInfo>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DocumentIdentificationInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * 
    * Request upload link
    * @return DirectUploadResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun documentsDirectUpload() : DirectUploadResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/documents/direct_upload",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<DirectUploadResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DirectUploadResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }

}
